{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","handlePageClick","e","selectedPage","selected","offset","state","perPage","setState","currentPage","fetchData","window","scrollTo","elements","bind","this","fetch","then","response","json","data","postData","slice","map","item","index","className","text","author","pageCount","Math","ceil","length","catch","error","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","subContainerClassName","activeClassName","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAoGeA,E,kDA7Fb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IA6CRC,gBAAkB,SAACC,GACjB,IAAMC,EAAeD,EAAEE,SACjBC,EAASF,EAAe,EAAKG,MAAMC,QAEzC,EAAKC,SAAS,CACZC,YAAaN,EACbE,OAAQA,IACP,WACD,EAAKK,eAIPC,OAAOC,SAAS,EAAE,IAxDlB,EAAKN,MAAQ,CACXO,SAAU,GACVR,OAAQ,EAERE,QAAS,GACTE,YAAa,GAGf,EAAKR,gBAAkB,EAAKA,gBAAgBa,KAArB,gBAVN,E,qDAanB,WACEC,KAAKL,c,uBAGP,WAAa,IAAD,OACVM,MAAM,+BACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAEJ,IAEMC,EAFQD,EAAKE,MAAM,EAAKhB,MAAMD,OAAQ,EAAKC,MAAMD,OAAS,EAAKC,MAAMC,SAEpDgB,KAAI,SAACC,EAAMC,GAChC,OACE,sBAAKC,UAAY,OAAjB,UAEE,qBAAKA,UAAY,YAAjB,SAA0CF,EAAKG,MAAbF,GAAwB,uBAC1D,sBAAKC,UAAY,cAAjB,eAAkCF,EAAKI,gBAK7C,EAAKpB,SAAS,CACZK,SAAUO,EACVS,UAAWC,KAAKC,KAAKX,EAAKY,OAAS,EAAK1B,MAAMC,SAC9Cc,gBAEDY,OAAM,SAACC,GACR,OAAO,8BACL,qDAAwBA,Y,oBAqBhC,WAEE,OACE,gCACE,sBAAKR,UAAY,eAAjB,UACE,kEAEA,cAAC,IAAD,OAEF,gCACE,qBAAKA,UAAY,OAAjB,SACGX,KAAKT,MAAMe,WAEd,cAAC,IAAD,CACEc,cAAe,OACfC,UAAW,OACXC,WAAY,MACZC,eAAgB,WAChBT,UAAWd,KAAKT,MAAMuB,UACtBU,qBAAsB,EACtBC,mBAAoB,EACpBC,aAAc1B,KAAKd,gBACnByC,mBAAoB,aACpBC,sBAAuB,mBACvBC,gBAAiB,qB,GAxFXC,IAAMC,WCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5fa34516.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\nimport {FaQuoteRight} from \"react-icons/fa\";\nimport ReactPaginate from 'react-paginate';\n\nclass App extends React.Component{\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      elements: [],\n      offset: 0,\n      // data: [],\n      perPage: 12,\n      currentPage: 0\n    };\n\n    this.handlePageClick = this.handlePageClick.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  fetchData() {\n    fetch('https://type.fit/api/quotes')\n      .then(response => response.json())\n      .then(data => {\n\n        const slice = data.slice(this.state.offset, this.state.offset + this.state.perPage);\n\n        const postData = slice.map((item, index) => {\n          return (\n            <div className = \"card\">\n              {/* <p>{item.text}</p> */}\n              <div className = \"quoteText\" key={index}>{item.text}</div><br></br>\n              <div className = \"quoteAuthor\">- {item.author}</div>\n            </div>\n          );\n        });\n\n        this.setState({\n          elements: data,\n          pageCount: Math.ceil(data.length / this.state.perPage),\n          postData\n        });\n      }).catch((error) => {\n        return <div>\n          <p>Error loading data! {error}</p>\n        </div>\n      });\n  }\n\n  handlePageClick = (e) => {\n    const selectedPage = e.selected;\n    const offset = selectedPage * this.state.perPage;\n    \n    this.setState({\n      currentPage: selectedPage,\n      offset: offset\n    }, () => {\n      this.fetchData()\n    });\n    \n    // to scroll page to the top when clicked\n    window.scrollTo(0,0);\n\n  };\n\n  render() {\n    // style = {{backgroundImage: `url(${backgroundImage})`}} inside card\n    return (\n      <div>\n        <div className = \"topContainer\">\n          <div>Quotes from great personalities</div>\n          {/* <div>Button</div> */}\n          <FaQuoteRight />\n        </div>\n        <div>\n          <div className = \"grid\">\n            {this.state.postData}\n          </div>\n          <ReactPaginate\n            previousLabel={\"prev\"}\n            nextLabel={\"next\"}\n            breakLabel={\"...\"}\n            breakClassName={\"break-me\"}\n            pageCount={this.state.pageCount}\n            marginPagesDisplayed={2}\n            pageRangeDisplayed={5}\n            onPageChange={this.handlePageClick}\n            containerClassName={\"pagination\"}\n            subContainerClassName={\"pages pagination\"}\n            activeClassName={\"active\"}/>\n        </div>\n      </div>\n    );\n  }  \n}\n\nexport default App;\n\n\n  // const [userData, setUserData] = useState({});\n\n  // useEffect(() => {\n  //   fetchData();\n  // }, []);\n\n  // async function fetchData() {\n  //   const response = await fetch('https://type.fit/api/quotes');\n  //   const jsonData = await response.json();\n  //   setUserData(jsonData)\n  // }\n\n\n  \n  \n  // for(let i = 0; i < 20; i++){\n  //   elements.push(\n  //     <div className = \"item\">item {0}</div>\n  //     );\n  //   }\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}